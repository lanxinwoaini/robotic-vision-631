/*
******************************************
* FileName	:soundchip.h 
* Author	:Russell LeBaron
* Date		:1/14/10
* Version	:0.0
*
******************************************
*
* This code contains driver functions for the Keterex KX1400 sound chip.
*  This includes ability to play a tone, play a file saved on attached EEPROM, Pass thru access to the EEPROM
*
* An audio phrase is a sequence of PCM/ADPCM audio samples, tone-generator sequences, and control commands.
****EXAMPLES*******

** The kx1400 requires that files saved to EEPROM are mapped in the specified way.  This may require that another program be written which will 
* take as input several audio files in the correct order we want them played.
*/
#ifndef SOUNDCHIP_H
#define SOUNDCHIP_H
#include "global.h"
#include "avrlibdefs.h"
#include "avrlibtypes.h"
#include "spi.h" //chip connected to SPI bus
#include "eeprom.h"
#include "xmodem.h"
#include "uart.h"
#include "rprintf.h"

#define PCM 0
#define ADPCM 1

//inputs
#define KX_nRESET	PC2 //Pin 25 (Output) Reset* of the KX1400 Sound Chip
#define KX_BUSY 	PC1//Pin 24 (Input) Busy from the KX1400 Sound Chip
#define KX_nRDY 	PC0 //Pin 23 (Input) Ready* from the KX1400 Sound Chip

//6.3.1. Memory Size Configuration
//The memory interface controller supports the use of serial memories with either 16-bit or 24-bit address spaces. 
//The address size is configured by the state of the MSIZE pin. If MSIZE is set to logic high, the KX1400 will generate 24-bit 
//addresses when accessing the external memory. If MSIZE is set to logic low, 16-bit addresses are generated. 
//The state of the MSIZE pin should remain fixed and not change between device resets.
//Table 6.3. Memory Size Configuration
//MSIZE State at End of Reset
//Address Size Generated by KX1400
//Logic High= 24-bit address
//Logic Low =16-bit address
#define KX_MSIZE 	0 //memory size 0 is 16-bit address, 1 is 24-bit

#define KX_RESET 		0x0 //0000 8 Bits Control Cancels any pending operation and returns the device to its default configuration.
#define KX_STOP 		0x1//0001 //8 Bits Control Halts the processing of any active audio command or phrase.
#define KX_SET_DURATION 0x2//0010 //16 Bits Control Specifies the length of time the tone generator plays tones in response to Play Tone commands.
#define KX_PLAY_TONE 	0x3//XX11 //16 Bits Audio Instructs the tone generator to synthesize a tone at the specified frequency.
#define KX_MUTE 		0x4//0100 //8 Bits Control Disables the speaker driver.
#define KX_UN_MUTE 		0x5//0101 //8 Bits Control Enables the speaker driver.
#define KX_PLAY_PHRASE 	0x6//0110 //16 Bits Audio Retrieves and processes a phrase from external memory.
#define KX_SET_VOLUME 	0x8//1000 //8 Bits Control Sets the volume level of the output.
#define KX_SET_OUTPUT 	0x9//1001 //8 Bits Control Sets the state of the two general purpose output pins.
#define KX_PLAY_ADPCM 	0xA//1010 //16 Bits Audio Sends 4-bit IMA ADPCM data to the audio processor.
#define KX_SET_CLOCK 	0xC//1100 //8 Bits Control Enables/Disables the clock output (CLKOUT) and selects frequency.
//- 1101 8 Bits Control Reserved.
#define KX_PLAY_PCM 	0xE//1110 //16 Bits Audio Sends 12-bit PCM data to the audio processor.

//Mode of functionality, either pass-through to EEPROM or normal chip function
#define KX_PASS_THROUGH 1
#define KX_NORMAL 		0

//typedef struct{
//	u16 phrasesInMem;
//	u16 volume;
//	u08 rules[10];
//	
//}gameParameters;

//Phrase locations, these are the locations of phrases you want played that are stored in EEPROM.  Used by PlayPhrase function
#define VICTORY_PHRASE 		0
#define DISABLED_PHRASE 	1
#define REVIVED_PHRASE 		2
#define GOT_FLAG_PHRASE 	3
#define FIRE_SHOT_PHRASE 	4
#define PASS_SHOT_PHRASE 	5
#define REVIVE_SHOT_PHRASE 	6
//***********************************************************************************
//Function prototypes
//***********************************************************************************
//	soundInit - Initialize the KX1400 chip via the SPI bus
// 
void soundInit(void);

//	soundReset - Reset the KX1400 chip via the SPI bus
// NOTE:  this will be needed when switching between EEPROM PassThrough and Sound Functionality modes
// input
//  u08 mode: either KX_PASS_THROUGH or KX_NORMAL, KX_PASS_THROUGH for accessing EEPROM functions
void soundReset(u08 mode);

// EEPROMMode - put the chip in EEPROMMode
// NOTE:  this will be needed when switching between EEPROM PassThrough and Sound Functionality modes
void EEPROMMode(void);

//	SoundMode - put the chip in Sound Chip mode
// NOTE:  this will be needed when switching between EEPROM PassThrough and Sound Functionality modes
void SoundMode(void);

//	PlayTone - KX1400 can play an audio phrase(basically a sound clip, look for definition above) already stored in memory 
//	input parameters
// 		u16	freqIndex	Tone frequency to play.  The Frequency Index takes a value from 0 to 16383. It then generates a 
//			a tone at freq where freq =	freqIndex/4.096 Hz.  Therefore, frequencies can be generated in the range of 0.24414 Hz to 3.9997 KHz.
//			A 0 repeats previous tone, but mutes it, effectively a silence command.
//		u16 duration	The duration value represents time in milliseconds the tone will play and may be configured with a value from 0 to 4095	
//	return value
//		0 if freqIndex or duration are invalid
//		1 with a valid freqIndex and duration
//
s08 PlayTone(u16 freqIndex, u16 duration);

//command from external memory, including the Stop command. To stop a Play ADPCM command from external memory, a hardware reset must be performed.
//	PlayAudioPhrase - KX1400 can play an audio phrase(basically a sound clip, look for definition above) already stored in memory 
//	input parameters
// 		phraseNum	phrase number to play.  This is defined as 0-4096. 
//	return value
//		0 if phrase number is invalid
//		1 with a valid phrase number
//
s08 PlayAudioPhrase(u16 phraseNum);

//	SaveAudioPhrase - Save Audio phrase to EEPROM 
//	input parameters
//		this could either keep track of what positions are taken, or more likely have specified which file location to save to
// 		u16	numPhrases 	number of phrases to save.  This is defined as 0-4096. 
//		u08* audioFile		pointer to beginning of audio file, what size?  this is either a PCM or a ADPCM file
//		u16 size	size of audio file
//		u08 audioType	defines whether file is PCM or ADPCM. PCM is defined as 0, ADPCM defined as 1
//	return value
//		0 if save failed
//		1 if save was succesfull
//
s08 SaveAudioPhrase(/*u16 numPhrases, u08 *audioFile, u16 size, u08 audioType*/void);

//	SaveGameParameters - Save all game parameters currently set 
//	input parameters
//		this might happen at the same time that the sound is saved to the chip?
// 		u08* parameter	name of parameter being saved
//		u08* value	value of the parameter
//	return value
//		0 if save failed
//		1 if save was succesfull
//
s08 SaveGameParameters(void);//(u08* parameter, u08 *value);
//may have to format the file on the fly

//ReadGameParameters -- reads all parameters from memory
u08 ReadGameParameters(void);
//todo: write program to format data that will go on the EEPROM

void sendSoundByte(u08 data);
void sendSoundWord(u16 data);
s08 setVolume(u08 vol);

#ifdef TESTING_ON
s08 SoundTest(void);
#endif
#endif
